I"˘<h2>O in√≠cio</h2>

<p>
Clojure possui uma sintaxe muito simples, por√©m que pode confundir muito <s>(me confundiu muito)</s> quem est√° come√ßando no mundo de linguagens que s√£o baseadas em Lisp. 
</p>

<p><code>(operador operando1 operando2... operando)</code></p>

<p>
N√£o entendeu? Ent√£o vamos para um exemplo. Suponhamos que voc√™ deseja realizar uma soma entre 5 n√∫meros. </p>

<p>O que em Javascript poder√≠amos fazer assim:</p>
<p><code>let resultado = 3 + 7 + 8;</code></p>

<p>Em Clojure fazemos assim: </p>
<p><code>(+ 3 7 8)</code><br /><i>=&gt; 18</i></p>

<p>
No c√≥digo acima o operador "+" soma os par√¢metros 3, 7 e 8.
</p>

<p>Um outro exemplo utilizando o famoso Hello World, onde a <i>string</i> "Hello World" √© passada como par√¢metro para a fun√ß√£o println: </p>

<p><code>(println "Hello World")</code><br /><i>=&gt; "Hello World"</i></p>
<p><br /></p>
<h2>Nomeando valores</h2>

<p>Usa-se a instru√ß√£o <b>def</b> para vincular o nome do s√≠mbolo a um valor. Exemplos: </p>

<p><code>(def texto "Iniciando com Clojure")</code></p>
<p><code>(def contas-pagas 100)</code></p>

<p>Imprimindo os valores definidos: </p>
<p><code>(println texto)</code><br /><i>=&gt; "Iniciando com Clojure"</i></p>
<p><code>(println "Quantidade de contas pagas:"  contas-pagas)</code><br /><i>=&gt; "Quantidade de contas pagas: 100"</i></p>

<p><br /></p>
<h2>Estruturas de dados</h2>

<p>Em Clojure todas as estruturas de dados s√£o imut√°veis, ou seja, seus valores n√£o podem ser alterados. 

<h3>N√∫meros b√°sicos</h3>

<p>Em Clojure podemos definir tr√™s tipos b√°sicos de n√∫meros, sendo eles Integer, Float ou fracionados. Exemplo: 

<p><code>(def numero-inteiro 10)</code><p>
<p><code>(def numero-ponto-flutuante 3.5)</code><p>
<p><code>(def numero-fracionado 10/3)</code><p>

<h3>Strings</h3>

<p>Strings representam textos, assim como em outras linguagens de programa√ß√£o. Exemplo: </p>

<p><code>(def hobbit "Bilbo")</code></p>

<h3>Mapas</h3>

<p>Mapas, assim como em outras linguagens de programa√ß√£o, s√£o estruturas que armazenam chaves e valores. Abaixo algus exemplos de mapas em Clojure: </p>

<p><code>(def usuario {:nome "Guilherme" :idade 30})</code></p>

<p><code>(def funcao {"funcao-soma" +})</code></p>

<p>Tamb√©m √© poss√≠vel encadear mapas: </p>
<p><code>(def mapa {:nome "Guilherme" :endereco {:cidade "S√£o Paulo" :rua "Rua Sete de Abril"}})</code></p>

<p>Outra forma de criar mapas √© atrav√©s da fun√ß√£o <b>hash-map</b>: </p>

<p><code>(def usuario (hash-map :nome "Guilherme" :cidade "S√£o Paulo"))</code></p>

<p>Para recuperar alguma informa√ß√£o do mapa, utilizamos a fun√ß√£o <b>get</b>. Nela n√≥s passamos o mapa e a keyword utilizada como chave para recuperar a informa√ß√£o desejada. Exemplo: </p>

<p><code>(get mapa :nome)</code><br /><i>=&gt; "Guilherme"</i></p>

<br />
<div class="message">
<p><i>Keywors s√£o geralmente utilizadas como chaves em mapas no Clojure.</i></p>
</div>

<h3>Vetores</h3>
<p> Um vetor √© como um array em linguagens mais comuns, onde o index come√ßa no 0. Definindo um s√≠mbolo como vetor: 

<p><code>(def numeros [3 2 1])</code></p>

<p>Recuperando item do vetor de acordo com o √≠ndice: </p>
<p><code>(get numeros 2)</code><br /><i> =&gt; 1</i></p>

<p>Tamb√©m √© poss√≠vel criar vetores utilizando a fun√ß√£o <b>vector</b></p>
<p><code>(def empresas (vector "Apple" "Microsoft" "Samsung"))</code></p>
<p><code>(get empresas 1)</code><br /><i> =&gt; "Microsoft"</i></p>

<h3>Listas</h3>

<p>Listas s√£o parecidas com vetores em Clojure, por√©m com algumas diferen√ßas. Por exemplo, para recuperar algum item de acordo com a posi√ß√£o da lista, usa-se a fun√ß√£o <b>nth</b> e n√£o a fun√ß√£o <b>get</b>. Para declarar uma lista, basta definir os itens da lista entre par√™nteres e colocar um ap√≥strofo no in√≠cio. Exemplo: </p>

<p><code>(def numeros '(1 2 3 4))</code></p>
<p><code>(def estados '("SP" "RJ" "RS" "PR"))</code></p>
<p><code>(nth estados 2)</code><br /><i> =&gt; "RS"</i></p>

<p>Levando em considera√ß√£o a performance, a fun√ß√£o <b>get</b> √© mais r√°pida que a <b>nth</b>, pois a <b>nth</b> passa por todos os elementos da lista para encontrar o item buscado.</p>

<p>Tamb√©m √© poss√≠vel criar listas utilizando a fun√ß√£o <b>list</b>:</p>

<p><code>(def numeros (list 1 2 3 4))</code></p>

<h3>Sets</h3>

<p>Sets s√£o cole√ß√µes em que os itens s√£o √∫nicos, ou seja, n√£o podem se repetir. Em Clojure temos duas formas de criar um Set: </p>

<p>Forma literal: </p>
<p><code>(def produtos #{"Refrigerante" "Carne" "Arroz"})</code></p>

<p>Utilizando a fun√ß√£o <b>hash-set</b>: </p>
<p><code>(def produtos (hash-set "Refrigerante" "Carne" "Arroz"))</code></p>

<p>Podemos inclusive transformar um vetor em um set: </p>
<p><code>(set [2 2 5 6 5 1 1])</code><br /><i>=&gt; #{2 5 6 1}</i></p>



<br />
<hr /><hr />
</p></p></p></p></p></p></p></p></p>
:ET